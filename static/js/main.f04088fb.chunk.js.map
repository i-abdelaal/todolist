{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Todo","todo","index","toggleTodo","removeTodo","style","textDecoration","isCompleted","className","type","onClick","text","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","placeholder","onChange","target","App","incomplete","todos","setTodos","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","newTodos","splice","map","key","filter","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAGA,SAASA,IACP,OAAO,yCAGT,SAASC,EAAT,GAAsD,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WACtC,OAAO,yBACPC,MAAO,CAAEC,eAAgBL,EAAKM,YAAc,eAAiB,IAC7DC,UAAU,QACR,6BACE,2BAAOA,UAAU,QAAQC,KAAK,WAAWC,QAAS,kBAAMP,EAAWD,OAElED,EAAKU,KACR,6BACE,4BAAQH,UAAU,iBAAiBE,QAAS,kBAAMN,EAAWF,KAA7D,OAKN,SAASU,EAAT,GAA8B,IAAXC,EAAU,EAAVA,QAAU,EACDC,mBAAS,IADR,mBACpBC,EADoB,KACbC,EADa,KAU3B,OACE,0BAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACEJ,IACJF,EAAQE,GACRC,EAAS,OAKP,2BACCP,KAAK,OACLD,UAAU,QACVY,YAAY,cACZL,MAAOA,EACPM,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOP,WAwEzBQ,MAnEf,WAAgB,IAAD,EACYT,mBAAS,CAChC,CACEH,KAAM,oBACNa,YAAY,GAEd,CACEb,KAAM,wBACNa,YAAY,GAEd,CACEb,KAAM,6BACNa,YAAY,KAZH,mBACNC,EADM,KACCC,EADD,KAiBbC,qBAAU,WACR,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAHpB,kBAIpBJ,GAAaF,EAASE,KACzB,IAEHD,qBAAU,WACRI,aAAaE,QARW,gBAQgBJ,KAAKK,UAAUT,MACtD,CAACA,IAEJ,IAKMtB,EAAa,SAAAD,GACjB,IAAMiC,EAAQ,YAAOV,GACrBU,EAASjC,GAAOK,aAAe4B,EAASjC,GAAOK,YAC/CmB,EAASS,IAGL/B,EAAa,SAAAF,GACjB,IAAMiC,EAAQ,YAAOV,GACrBU,EAASC,OAAOlC,EAAO,GACvBwB,EAASS,IAGX,OACE,yBAAK3B,UAAU,OACb,yBAAKA,UAAU,UACb,kBAACT,EAAD,OAEF,yBAAKS,UAAU,aACZiB,EAAMY,KAAI,SAACpC,EAAMC,GAAP,OACX,kBAACF,EAAD,CACAsC,IAAKpC,EACLA,MAAOA,EACPD,KAAMA,EACNE,WAAYA,EACZC,WAAYA,OAGZ,kBAACQ,EAAD,CAAUC,QAhCA,SAAAF,GACd,IAAMwB,EAAQ,sBAAOV,GAAP,CAAc,CAACd,UAC7Be,EAASS,OAgCP,yBAAK3B,UAAU,YACXiB,EAAMc,QAAO,SAAAtC,GAAI,OAAKA,EAAKM,eAAaiC,OAD5C,iBC3FcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f04088fb.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction Header() {\n  return <h1>Todo List</h1>\n};\n\nfunction Todo({todo, index, toggleTodo, removeTodo}) {\n  return <div \n  style={{ textDecoration: todo.isCompleted ? 'line-through' : '' }} \n  className=\"todo\">\n    <div>\n      <input className=\"check\" type=\"checkbox\" onClick={() => toggleTodo(index)} /> \n    </div>\n      {todo.text}\n    <div>\n      <button className=\"btn .btn:hover\" onClick={() => removeTodo(index)}>x</button>\n    </div>\n    </div>\n};\n\nfunction TodoForm({addTodo}) {\n  const [value, setValue] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if(!value) return;\n    addTodo(value)\n    setValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n       type=\"text\" \n       className=\"input\" \n       placeholder=\"Add Todo...\"\n       value={value}\n       onChange={e => setValue(e.target.value)} />\n    </form>\n  )\n};\n\nfunction App() {\n  const [todos, setTodos] =useState([\n    {\n      text: 'Learn about React',\n      incomplete: false\n    },\n    {\n      text: 'Meet Friend for lunch',\n      incomplete: false\n    },\n    {\n      text: 'Build really cool todo app',\n      incomplete: false\n    }\n  ]);\n  const Local_Storage_Key = 'todoApp.todos';\n\n  useEffect(() => {\n    const storedTodos = JSON.parse(localStorage.getItem(Local_Storage_Key));\n    if (storedTodos) setTodos(storedTodos)\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(Local_Storage_Key, JSON.stringify(todos))\n  }, [todos])\n\n  const addTodo = text => {\n    const newTodos = [...todos, {text}];\n    setTodos(newTodos);\n  };\n\n  const toggleTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <Header />\n      </div>\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n        <Todo \n        key={index} \n        index={index} \n        todo={todo}\n        toggleTodo={toggleTodo} \n        removeTodo={removeTodo}\n        />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n      <div className=\"leftTodo\" >\n        { todos.filter(todo => !todo.isCompleted).length } left to do\n      </div>\n    </div>\n  )\n };\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}